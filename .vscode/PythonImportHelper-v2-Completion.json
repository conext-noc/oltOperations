[
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "typeCheck",
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "typeCheck",
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "typeCheck",
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "typeCheck",
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "opticalValues",
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "opticalValues",
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "opticalValues",
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "serialSearch",
        "importPath": "helpers.clientFinder.serialLookup",
        "description": "helpers.clientFinder.serialLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.serialLookup",
        "documentation": {}
    },
    {
        "label": "wan",
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "wan",
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "isExtraImport": true,
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "decoder",
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "isExtraImport": true,
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "isExtraImport": true,
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "fileToDict",
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ontSpid",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "spidCalc",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "availableSpid",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "verifySPID",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "verifySPID",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "availableSpid",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "spidCalc",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "verifySPID",
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "isExtraImport": true,
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "planX15Maps",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "planX2Maps",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "planX15NMaps",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "oldPlans",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "plans",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "oldPlans",
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "isExtraImport": true,
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "isExtraImport": true,
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "interface",
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "isExtraImport": true,
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "isExtraImport": true,
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "speed",
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "isExtraImport": true,
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "ports",
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "isExtraImport": true,
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "preWan",
        "importPath": "helpers.clientFinder.wanInterface",
        "description": "helpers.clientFinder.wanInterface",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.wanInterface",
        "documentation": {}
    },
    {
        "label": "preWan",
        "importPath": "helpers.clientFinder.wanInterface",
        "description": "helpers.clientFinder.wanInterface",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.wanInterface",
        "documentation": {}
    },
    {
        "label": "userpaths",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "userpaths",
        "description": "userpaths",
        "detail": "userpaths",
        "documentation": {}
    },
    {
        "label": "gspread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gspread",
        "description": "gspread",
        "detail": "gspread",
        "documentation": {}
    },
    {
        "label": "paramiko",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "paramiko",
        "description": "paramiko",
        "detail": "paramiko",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "providerMap",
        "importPath": "helpers.info.hashMaps",
        "description": "helpers.info.hashMaps",
        "isExtraImport": true,
        "detail": "helpers.info.hashMaps",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "nameLookup",
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "addOnuService",
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addONU",
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addOnuService",
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addOnuService",
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addOnuServiceNew",
        "importPath": "helpers.operations.newAddHandler",
        "description": "helpers.operations.newAddHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.newAddHandler",
        "documentation": {}
    },
    {
        "label": "addONUNew",
        "importPath": "helpers.operations.newAddHandler",
        "description": "helpers.operations.newAddHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.newAddHandler",
        "documentation": {}
    },
    {
        "label": "addOnuServiceNew",
        "importPath": "helpers.operations.newAddHandler",
        "description": "helpers.operations.newAddHandler",
        "isExtraImport": true,
        "detail": "helpers.operations.newAddHandler",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "isExtraImport": true,
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "newLookup",
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newLookup",
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "isExtraImport": true,
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "approved",
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "isExtraImport": true,
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "denied",
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "isExtraImport": true,
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "approved",
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "isExtraImport": true,
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "denied",
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "isExtraImport": true,
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "ssh",
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "isExtraImport": true,
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "ssh",
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "isExtraImport": true,
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "existingLookup",
        "importPath": "scripts.BC",
        "description": "scripts.BC",
        "isExtraImport": true,
        "detail": "scripts.BC",
        "documentation": {}
    },
    {
        "label": "deleteClient",
        "importPath": "scripts.EC",
        "description": "scripts.EC",
        "isExtraImport": true,
        "detail": "scripts.EC",
        "documentation": {}
    },
    {
        "label": "confirm",
        "importPath": "scripts.IX",
        "description": "scripts.IX",
        "isExtraImport": true,
        "detail": "scripts.IX",
        "documentation": {}
    },
    {
        "label": "confirmNew",
        "importPath": "scripts.IXN",
        "description": "scripts.IXN",
        "isExtraImport": true,
        "detail": "scripts.IXN",
        "documentation": {}
    },
    {
        "label": "modifyClient",
        "importPath": "scripts.MC",
        "description": "scripts.MC",
        "isExtraImport": true,
        "detail": "scripts.MC",
        "documentation": {}
    },
    {
        "label": "operate",
        "importPath": "scripts.OX",
        "description": "scripts.OX",
        "isExtraImport": true,
        "detail": "scripts.OX",
        "documentation": {}
    },
    {
        "label": "verifyTraffic",
        "importPath": "scripts.VC",
        "description": "scripts.VC",
        "isExtraImport": true,
        "detail": "scripts.VC",
        "documentation": {}
    },
    {
        "label": "portOperation",
        "importPath": "scripts.XP",
        "description": "scripts.XP",
        "isExtraImport": true,
        "detail": "scripts.XP",
        "documentation": {}
    },
    {
        "label": "filedialog",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "modifier",
        "importPath": "helpers.utils.sheets",
        "description": "helpers.utils.sheets",
        "isExtraImport": true,
        "detail": "helpers.utils.sheets",
        "documentation": {}
    },
    {
        "label": "intFormatter",
        "importPath": "helpers.utils.interfaceHandler",
        "description": "helpers.utils.interfaceHandler",
        "isExtraImport": true,
        "detail": "helpers.utils.interfaceHandler",
        "documentation": {}
    },
    {
        "label": "clientsTable",
        "importPath": "helpers.fileFormatters.table",
        "description": "helpers.fileFormatters.table",
        "isExtraImport": true,
        "detail": "helpers.fileFormatters.table",
        "documentation": {}
    },
    {
        "label": "pygsheets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygsheets",
        "description": "pygsheets",
        "detail": "pygsheets",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "olt",
        "importPath": "scripts.OLT",
        "description": "scripts.OLT",
        "isExtraImport": true,
        "detail": "scripts.OLT",
        "documentation": {}
    },
    {
        "label": "rtr",
        "importPath": "scripts.RTR",
        "description": "scripts.RTR",
        "isExtraImport": true,
        "detail": "scripts.RTR",
        "documentation": {}
    },
    {
        "label": "dataLookup",
        "kind": 2,
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "peekOfCode": "def dataLookup(comm, command, olt, lookupType, all=True):\n    \"\"\"\n    all ==> display all the data available | false = for installation data concern\n    \"\"\"\n    FAIL = None\n    NAME = None\n    FRAME = None\n    SLOT = None\n    PORT = None\n    ID = None",
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "existing",
        "kind": 5,
        "importPath": "helpers.clientFinder.dataLookup",
        "description": "helpers.clientFinder.dataLookup",
        "peekOfCode": "existing = {\n    \"CF\": \"Control flag            : \",\n    \"RE\": \"Run state               : \",\n    \"DESC\": \"Description             : \",\n    \"LDC\": \"Last down cause         : \",\n    \"CS\": \"Config state            :\",\n    \"SN\": \"SN                      : \",\n    \"LUT\": \"Last up time            : \",\n}\ndef dataLookup(comm, command, olt, lookupType, all=True):",
        "detail": "helpers.clientFinder.dataLookup",
        "documentation": {}
    },
    {
        "label": "nameLookup",
        "kind": 2,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "def nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)\n  value = decoder(comm)\n  regex = checkIter(value,condition)\n  FAIL = failChecker(value)\n  portRange= []\n  if FAIL == None:",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "infoHeader",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "infoHeader = \"NA,F/,S/P,ID,SN,controlFlag,runState,configState,matchState,protectSide,NA\"\ndescHeader = \"NA,F/,S/P,ID,NAME1,NAME2,NAME3,NAME4,NAME5,NAME6,NAME7,NA\"\ncondition = \"-----------------------------------------------------------------------------\"\nnewCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "descHeader",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "descHeader = \"NA,F/,S/P,ID,NAME1,NAME2,NAME3,NAME4,NAME5,NAME6,NAME7,NA\"\ncondition = \"-----------------------------------------------------------------------------\"\nnewCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "condition = \"-----------------------------------------------------------------------------\"\nnewCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "newCond",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "newCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)\n  value = decoder(comm)",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "newCondFSP",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "newCondFSP = \"F/S/P               : \"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)\n  value = decoder(comm)\n  regex = checkIter(value,condition)",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "newCondSn",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "newCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)\n  value = decoder(comm)\n  regex = checkIter(value,condition)\n  FAIL = failChecker(value)",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "newCondTime",
        "kind": 5,
        "importPath": "helpers.clientFinder.nameLookup",
        "description": "helpers.clientFinder.nameLookup",
        "peekOfCode": "newCondTime = \"Ont autofind time   : \"\ndef nameLookup(comm,command,quit):\n  clients = []\n  NAME = inp(\"Ingrese el Nombre del Cliente a buscar : \")\n  command(f'display ont info by-desc \"{NAME}\" | no-more ')\n  sleep(5)\n  value = decoder(comm)\n  regex = checkIter(value,condition)\n  FAIL = failChecker(value)\n  portRange= []",
        "detail": "helpers.clientFinder.nameLookup",
        "documentation": {}
    },
    {
        "label": "newLookup",
        "kind": 2,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "def newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []\n    command(\"display ont autofind all | no-more\")\n    sleep(5)\n    value = decoder(comm)\n    regex = checkIter(value, newCond)\n    print(value)",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "condition = (\n    \"-----------------------------------------------------------------------------\"\n)\nnewCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondFSPEnd = \"ONT NNI type\"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newCond",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "newCond = \"----------------------------------------------------------------------------\"\nnewCondFSP = \"F/S/P               : \"\nnewCondFSPEnd = \"ONT NNI type\"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newCondFSP",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "newCondFSP = \"F/S/P               : \"\nnewCondFSPEnd = \"ONT NNI type\"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []\n    command(\"display ont autofind all | no-more\")",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newCondFSPEnd",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "newCondFSPEnd = \"ONT NNI type\"\nnewCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []\n    command(\"display ont autofind all | no-more\")\n    sleep(5)",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newCondSn",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "newCondSn = \"Ont SN              : \"\nnewCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []\n    command(\"display ont autofind all | no-more\")\n    sleep(5)\n    value = decoder(comm)",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "newCondTime",
        "kind": 5,
        "importPath": "helpers.clientFinder.newLookup",
        "description": "helpers.clientFinder.newLookup",
        "peekOfCode": "newCondTime = \"Ont autofind time   : \"\ndef newLookup(comm, command, olt):\n    SN_NEW = inp(\"Ingrese el Serial del Cliente a buscar : \").upper()\n    SN_FINAL = None\n    FSP_FINAL = None\n    client = []\n    command(\"display ont autofind all | no-more\")\n    sleep(5)\n    value = decoder(comm)\n    regex = checkIter(value, newCond)",
        "detail": "helpers.clientFinder.newLookup",
        "documentation": {}
    },
    {
        "label": "typeCheck",
        "kind": 2,
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "peekOfCode": "def typeCheck(comm,command,data):\n  ONT_TYPE = None\n  FAIL = None\n  command(f\"  interface  gpon  {data['frame']}/{data['slot']}  \")\n  command(f\"  display  ont  version  {data['port']}  {data['id']}  \")\n  command(\"quit\")\n  value = decoder(comm)\n  FAIL = failChecker(value)\n  if(FAIL == None):\n    (_,tS) = check(value,ontTypeStart).span()",
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "ontTypeStart",
        "kind": 5,
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "peekOfCode": "ontTypeStart = \"OntProductDescription    : \"\nontTypeEnd = \"GPON\"\ndef typeCheck(comm,command,data):\n  ONT_TYPE = None\n  FAIL = None\n  command(f\"  interface  gpon  {data['frame']}/{data['slot']}  \")\n  command(f\"  display  ont  version  {data['port']}  {data['id']}  \")\n  command(\"quit\")\n  value = decoder(comm)\n  FAIL = failChecker(value)",
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "ontTypeEnd",
        "kind": 5,
        "importPath": "helpers.clientFinder.ontType",
        "description": "helpers.clientFinder.ontType",
        "peekOfCode": "ontTypeEnd = \"GPON\"\ndef typeCheck(comm,command,data):\n  ONT_TYPE = None\n  FAIL = None\n  command(f\"  interface  gpon  {data['frame']}/{data['slot']}  \")\n  command(f\"  display  ont  version  {data['port']}  {data['id']}  \")\n  command(\"quit\")\n  value = decoder(comm)\n  FAIL = failChecker(value)\n  if(FAIL == None):",
        "detail": "helpers.clientFinder.ontType",
        "documentation": {}
    },
    {
        "label": "opticalValues",
        "kind": 2,
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "peekOfCode": "def opticalValues(comm, command, data, show):\n    TEMP = None\n    PWR = None\n    command(f'  interface  gpon  {data[\"frame\"]}/{data[\"slot\"]}  ')\n    command(f'  display  ont  optical-info  {data[\"port\"]}  {data[\"id\"]}  |  no-more')\n    command('quit')\n    value = decoder(comm)\n    fail = failChecker(value)\n    rePwr = check(value, conditionPwr)\n    reTemp = check(value, conditionTemp)",
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "conditionTemp",
        "kind": 5,
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "peekOfCode": "conditionTemp = \"Temperature\\(C\\)                         : \"\nconditionPwr = \"Rx optical power\\(dBm\\)                  : \"\ndef opticalValues(comm, command, data, show):\n    TEMP = None\n    PWR = None\n    command(f'  interface  gpon  {data[\"frame\"]}/{data[\"slot\"]}  ')\n    command(f'  display  ont  optical-info  {data[\"port\"]}  {data[\"id\"]}  |  no-more')\n    command('quit')\n    value = decoder(comm)\n    fail = failChecker(value)",
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "conditionPwr",
        "kind": 5,
        "importPath": "helpers.clientFinder.optical",
        "description": "helpers.clientFinder.optical",
        "peekOfCode": "conditionPwr = \"Rx optical power\\(dBm\\)                  : \"\ndef opticalValues(comm, command, data, show):\n    TEMP = None\n    PWR = None\n    command(f'  interface  gpon  {data[\"frame\"]}/{data[\"slot\"]}  ')\n    command(f'  display  ont  optical-info  {data[\"port\"]}  {data[\"id\"]}  |  no-more')\n    command('quit')\n    value = decoder(comm)\n    fail = failChecker(value)\n    rePwr = check(value, conditionPwr)",
        "detail": "helpers.clientFinder.optical",
        "documentation": {}
    },
    {
        "label": "serialSearch",
        "kind": 2,
        "importPath": "helpers.clientFinder.serialLookup",
        "description": "helpers.clientFinder.serialLookup",
        "peekOfCode": "def serialSearch(comm, command, SN):\n    FAIL = None\n    command(f\"display ont info by-sn {SN} | no-more\")\n    sleep(3)\n    val = decoder(comm)\n    regex = checkIter(val,existingCond)\n    FAIL = failChecker(val)\n    if FAIL == None:\n        (_, s) = regex[0]\n        (e, _) = regex[len(regex) - 1]",
        "detail": "helpers.clientFinder.serialLookup",
        "documentation": {}
    },
    {
        "label": "existingCond",
        "kind": 5,
        "importPath": "helpers.clientFinder.serialLookup",
        "description": "helpers.clientFinder.serialLookup",
        "peekOfCode": "existingCond = \"-----------------------------------------------------------------------------\"\nexisting = {\n    \"FSP\": \"F/S/P                   : \",\n    \"LP\": \"Line profile name    : \",\n    \"SRV\": \"Service profile name : \",\n    \"ONTID\": \"ONT-ID                  : \",\n    \"CF\": \"Control flag            : \",\n    \"CS\": \"Config state\",\n    \"RE\": \"Run state               : \",\n    \"DESC\": \"Description             : \",",
        "detail": "helpers.clientFinder.serialLookup",
        "documentation": {}
    },
    {
        "label": "existing",
        "kind": 5,
        "importPath": "helpers.clientFinder.serialLookup",
        "description": "helpers.clientFinder.serialLookup",
        "peekOfCode": "existing = {\n    \"FSP\": \"F/S/P                   : \",\n    \"LP\": \"Line profile name    : \",\n    \"SRV\": \"Service profile name : \",\n    \"ONTID\": \"ONT-ID                  : \",\n    \"CF\": \"Control flag            : \",\n    \"CS\": \"Config state\",\n    \"RE\": \"Run state               : \",\n    \"DESC\": \"Description             : \",\n    \"LDC\": \"Last down cause         : \",",
        "detail": "helpers.clientFinder.serialLookup",
        "documentation": {}
    },
    {
        "label": "wan",
        "kind": 2,
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "peekOfCode": "def wan(comm, command, FRAME, SLOT, PORT, ID, OLT):\n    IPADDRESS = None\n    FAIL = None\n    WAN = []\n    activeVlan = None\n    planMap = planX15Maps if OLT == \"2\" else planX2Maps if OLT == \"3\" else planX15NMaps\n    (result, failSpid) = ontSpid(comm, command, FRAME, SLOT, PORT, ID)\n    if failSpid == None:\n        command(f\"display ont wan-info {FRAME}/{SLOT} {PORT} {ID} | exclude IPv6 | exclude Prefix | exclude DS | exclude NAT | exclude type | exclude address | exclude Default | exclude DNS | exclude 60 | exclude mask\")\n        command(\"q\")",
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "ip",
        "kind": 5,
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "peekOfCode": "ip = \"IPv4 address               : \"\nendIp = \"Subnet mask\"\nvlan = \"Manage VLAN                : \"\nplanMap = {\"VLANID\": \"VLAN ID             : \",\n           \"PLAN\": \"Inbound table name  : \"}\ndef wan(comm, command, FRAME, SLOT, PORT, ID, OLT):\n    IPADDRESS = None\n    FAIL = None\n    WAN = []\n    activeVlan = None",
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "endIp",
        "kind": 5,
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "peekOfCode": "endIp = \"Subnet mask\"\nvlan = \"Manage VLAN                : \"\nplanMap = {\"VLANID\": \"VLAN ID             : \",\n           \"PLAN\": \"Inbound table name  : \"}\ndef wan(comm, command, FRAME, SLOT, PORT, ID, OLT):\n    IPADDRESS = None\n    FAIL = None\n    WAN = []\n    activeVlan = None\n    planMap = planX15Maps if OLT == \"2\" else planX2Maps if OLT == \"3\" else planX15NMaps",
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "vlan",
        "kind": 5,
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "peekOfCode": "vlan = \"Manage VLAN                : \"\nplanMap = {\"VLANID\": \"VLAN ID             : \",\n           \"PLAN\": \"Inbound table name  : \"}\ndef wan(comm, command, FRAME, SLOT, PORT, ID, OLT):\n    IPADDRESS = None\n    FAIL = None\n    WAN = []\n    activeVlan = None\n    planMap = planX15Maps if OLT == \"2\" else planX2Maps if OLT == \"3\" else planX15NMaps\n    (result, failSpid) = ontSpid(comm, command, FRAME, SLOT, PORT, ID)",
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "planMap",
        "kind": 5,
        "importPath": "helpers.clientFinder.wan",
        "description": "helpers.clientFinder.wan",
        "peekOfCode": "planMap = {\"VLANID\": \"VLAN ID             : \",\n           \"PLAN\": \"Inbound table name  : \"}\ndef wan(comm, command, FRAME, SLOT, PORT, ID, OLT):\n    IPADDRESS = None\n    FAIL = None\n    WAN = []\n    activeVlan = None\n    planMap = planX15Maps if OLT == \"2\" else planX2Maps if OLT == \"3\" else planX15NMaps\n    (result, failSpid) = ontSpid(comm, command, FRAME, SLOT, PORT, ID)\n    if failSpid == None:",
        "detail": "helpers.clientFinder.wan",
        "documentation": {}
    },
    {
        "label": "preWan",
        "kind": 2,
        "importPath": "helpers.clientFinder.wanInterface",
        "description": "helpers.clientFinder.wanInterface",
        "peekOfCode": "def preWan(comm, command, data):\n    command(f\"interface gpon {data['frame']}/{data['slot']}\")\n    command(f\"display ont wan-info {data['port']} {data['id']}\")\n    command(\"quit\")\n    value = decoder(comm)\n    re = check(value, \"Manage VLAN                : \")\n    fail = failChecker(value)\n    if fail == None:\n        (_, e) = re.span()\n        vUsed = value[e: e + 4]",
        "detail": "helpers.clientFinder.wanInterface",
        "documentation": {}
    },
    {
        "label": "failChecker",
        "kind": 2,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "def failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)\n    fail4 = check(value, failAnother)\n    if fail1 == None and fail2 == None and fail3 == None and fail4 == None:\n        return None\n    elif fail1 != None and fail2 == None and fail3 == None and fail4 == None:\n        (_, s) = fail1.span()\n        end = checkIter(value, endFail)",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failSTR",
        "kind": 5,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "failSTR = \"Failure: \"\nfailTp1 = \"% \"\nendFail = \"MARLLM0\"\nanotherFail = \"The required ONT does not exist\"\nfailAnother = \"WAN port does not exist\"\n# improve this\ndef failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failTp1",
        "kind": 5,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "failTp1 = \"% \"\nendFail = \"MARLLM0\"\nanotherFail = \"The required ONT does not exist\"\nfailAnother = \"WAN port does not exist\"\n# improve this\ndef failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)\n    fail4 = check(value, failAnother)",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "endFail",
        "kind": 5,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "endFail = \"MARLLM0\"\nanotherFail = \"The required ONT does not exist\"\nfailAnother = \"WAN port does not exist\"\n# improve this\ndef failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)\n    fail4 = check(value, failAnother)\n    if fail1 == None and fail2 == None and fail3 == None and fail4 == None:",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "anotherFail",
        "kind": 5,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "anotherFail = \"The required ONT does not exist\"\nfailAnother = \"WAN port does not exist\"\n# improve this\ndef failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)\n    fail4 = check(value, failAnother)\n    if fail1 == None and fail2 == None and fail3 == None and fail4 == None:\n        return None",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "failAnother",
        "kind": 5,
        "importPath": "helpers.failHandler.fail",
        "description": "helpers.failHandler.fail",
        "peekOfCode": "failAnother = \"WAN port does not exist\"\n# improve this\ndef failChecker(value):\n    fail1 = check(value, failSTR)\n    fail2 = check(value, failTp1)\n    fail3 = check(value, anotherFail)\n    fail4 = check(value, failAnother)\n    if fail1 == None and fail2 == None and fail3 == None and fail4 == None:\n        return None\n    elif fail1 != None and fail2 == None and fail3 == None and fail4 == None:",
        "detail": "helpers.failHandler.fail",
        "documentation": {}
    },
    {
        "label": "dictConverter",
        "kind": 2,
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "peekOfCode": "def dictConverter(string):\n  data = pd.read_csv(StringIO(string), sep=\",\").to_dict(\"records\")\n  return data\ndef fileToDict(fileName, fileType):\n  file = pd.read_excel(fileName) if fileType == \"E\" else pd.read_csv(\n    fileName, encoding='latin1')\n  data = file.to_dict(\"records\")\n  return data\ndef dictToFile(fileName, fileType, path, data, show):\n  value = pd.DataFrame.from_records(data)",
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "fileToDict",
        "kind": 2,
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "peekOfCode": "def fileToDict(fileName, fileType):\n  file = pd.read_excel(fileName) if fileType == \"E\" else pd.read_csv(\n    fileName, encoding='latin1')\n  data = file.to_dict(\"records\")\n  return data\ndef dictToFile(fileName, fileType, path, data, show):\n  value = pd.DataFrame.from_records(data)\n  resPath = f\"{path}/\" if show else \"\"\n  value.to_csv(f\"{resPath}/{fileName}.csv\",\n                index=None) if fileType == \"C\" else value.to_excel(f\"{resPath}/{fileName}.xlsx\")",
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dictToFile",
        "kind": 2,
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "peekOfCode": "def dictToFile(fileName, fileType, path, data, show):\n  value = pd.DataFrame.from_records(data)\n  resPath = f\"{path}/\" if show else \"\"\n  value.to_csv(f\"{resPath}/{fileName}.csv\",\n                index=None) if fileType == \"C\" else value.to_excel(f\"{resPath}/{fileName}.xlsx\")\ndef dataToDict(header, data):\n  value = re.sub(\" +\", \" \", data).replace(\" \", \",\")\n  res = header + value\n  print(res[:-1], file=open(\"data.csv\", \"w\",encoding=\"utf-8\"))\n  result = fileToDict(\"data.csv\",\"C\")",
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "dataToDict",
        "kind": 2,
        "importPath": "helpers.fileFormatters.fileHandler",
        "description": "helpers.fileFormatters.fileHandler",
        "peekOfCode": "def dataToDict(header, data):\n  value = re.sub(\" +\", \" \", data).replace(\" \", \",\")\n  res = header + value\n  print(res[:-1], file=open(\"data.csv\", \"w\",encoding=\"utf-8\"))\n  result = fileToDict(\"data.csv\",\"C\")\n  os.remove(\"data.csv\")\n  return result",
        "detail": "helpers.fileFormatters.fileHandler",
        "documentation": {}
    },
    {
        "label": "clientsTable",
        "kind": 2,
        "importPath": "helpers.fileFormatters.table",
        "description": "helpers.fileFormatters.table",
        "peekOfCode": "def clientsTable(comm, command, lst):\n    CLIENTS = []\n    for idx, lt in enumerate(lst):\n        clientsSummary = []\n        clientsPort = []\n        fsp = lt[\"fsp\"]\n        command(f\"display ont info summary {fsp} | no-more\")\n        sleep(3)\n        FRAME = int(fsp.split(\"/\")[0])\n        SLOT = int(fsp.split(\"/\")[1])",
        "detail": "helpers.fileFormatters.table",
        "documentation": {}
    },
    {
        "label": "providerMap",
        "kind": 5,
        "importPath": "helpers.info.hashMaps",
        "description": "helpers.info.hashMaps",
        "peekOfCode": "providerMap = {\"1101\": \"INTER\", \"1102\": \"VNET\", \"1104\": \"IP PUBLICAS\", \"101\": \"VOIP\"}",
        "detail": "helpers.info.hashMaps",
        "documentation": {}
    },
    {
        "label": "conditionSpidOnt",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "conditionSpidOnt = \"CTRL_C to break\"\ncondition = \"-----------------------------------------------------------------------------\"\nspidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "condition = \"-----------------------------------------------------------------------------\"\nspidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "spidHeader",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "spidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "conditionSPID",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "conditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",\n    \"endStatus\": \"Label               :\",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "spidCheck",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "spidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",\n    \"endStatus\": \"Label               :\",\n}",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "planX2Maps",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "planX2Maps = {\n    \"7\": \"OZ_FAMILY\",\n    \"8\": \"FTTH_INTERNET_10Mbps\",\n    \"9\": \"FTTH_INTERNET_15\",\n    \"15\": \"FTTH_INTERNET_30Mbps\",\n    \"16\": \"FTTH_INTERNET_5Mbps\",\n    \"18\": \"FTTH_UNLIMITED\",\n    \"19\": \"FTTH_VOIP\",\n    \"30\": \"FTTH_INTERNET_MAX\",\n    \"32\": \"OZ_MAGICAL\",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "planX15NMaps",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "planX15NMaps = {\n    \"210\": \"PLAN_0\",\n    \"211\": \"PLAN_1\",\n    \"212\": \"PLAN_2\",\n    \"213\": \"PLAN_3\",\n    \"214\": \"PLAN_4\",\n    \"215\": \"PLAN_5\",\n}\nplanX15Maps = {\n    \"6\": \"OZ_LIFT\",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "planX15Maps",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "planX15Maps = {\n    \"6\": \"OZ_LIFT\",\n    \"7\": \"OZ_FAMILY\",\n    \"9\": \"FTTH_VOIP\",\n    \"15\": \"UNLIMITED\",\n    \"16\": \"FTTH_INTERNET_10Mbps\",\n    \"20\": \"FTTH_INTERNET_5Mbps\",\n    \"23\": \"FTTH_INTERNET_15\",\n    \"25\": \"FTTH_INTERNET_30Mbps\",\n    \"39\": \"OZ_MAGICAL\",",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "oldPlans",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "oldPlans = {\n    \"2\":{\n        \"OZ_PLUS\":47,\n        \"OZ_MAX\":46,\n        \"OZ_NEXT\":40,\n        \"OZ_MAGICAL\":39,\n        \"OZ_SKY\":45,\n        \"OZ_UP\":49,\n        \"OZ_LIFT\":6,\n        \"OZ_FAMILY\":25,",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "plans",
        "kind": 5,
        "importPath": "helpers.info.plans",
        "description": "helpers.info.plans",
        "peekOfCode": "plans = {\n    \"OZ_0_1\": {\n        \"lineProfile\": 3,\n        \"srvProfile\": 110,\n        \"vlan\": 1100,\n        \"plan\": 110,\n        \"gemPort\": 10\n    },\n    \"OZ_PLUS_1\": {\n        \"lineProfile\": 17,",
        "detail": "helpers.info.plans",
        "documentation": {}
    },
    {
        "label": "table",
        "kind": 5,
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "peekOfCode": "table = {\n    \"conditionSummary\": \"------------------------------------------------------------------------------\",\n    \"conditionPort\": \"-----------------------------------------------------------------------------\",\n    \"optionsSummary\": [\n        {\n            \"name\": \"state\",\n            \"start\": 2,\n            \"end\": 3,\n            \"header\": \",ID,State,UpDate,UpTime,DownDate,DownTime,DownCause1,DownCause2,DownCause3,DownCause4,DownCause5,DownCause6,DownCause7,DownCause8\",\n        },",
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "ports",
        "kind": 5,
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "peekOfCode": "ports = {\n    \"olt\": {\n        \"1\": [\n            # {\"fsp\": \"0/1/0\"},\n            # {\"fsp\": \"0/1/1\"},\n            # {\"fsp\": \"0/1/2\"},\n            # {\"fsp\": \"0/1/3\"},\n            # {\"fsp\": \"0/1/4\"},\n            # {\"fsp\": \"0/1/5\"},\n            # {\"fsp\": \"0/1/6\"},",
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "speed",
        "kind": 5,
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "peekOfCode": "speed = {\n    \"up\": \"Up traffic \\(kbps\\)          : \",\n    \"down\": \"Down traffic \\(kbps\\)        : \",\n    \"cond\": \"----------------------------------------------------------------\",\n}\ninterface = {\n    \"start\":\"InUti/OutUti: input utility/output utility\",\n    \"end\":\"NULL0\",\n    \"header\":\"Interface,PHY,Protocol,InUti,OutUti,inErrors,outErrors\\n\",\n}",
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "interface",
        "kind": 5,
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "peekOfCode": "interface = {\n    \"start\":\"InUti/OutUti: input utility/output utility\",\n    \"end\":\"NULL0\",\n    \"header\":\"Interface,PHY,Protocol,InUti,OutUti,inErrors,outErrors\\n\",\n}\nrouter = {\n    \"interfacesC1\":[\"GigabitEthernet0/3/7(10G)\"],\n    \"interfacesC2\":[\"GigabitEthernet0/3/7(10G)\", \"GigabitEthernet0/3/8(10G)\"]\n}",
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "helpers.info.regexConditions",
        "description": "helpers.info.regexConditions",
        "peekOfCode": "router = {\n    \"interfacesC1\":[\"GigabitEthernet0/3/7(10G)\"],\n    \"interfacesC2\":[\"GigabitEthernet0/3/7(10G)\", \"GigabitEthernet0/3/8(10G)\"]\n}",
        "detail": "helpers.info.regexConditions",
        "documentation": {}
    },
    {
        "label": "addONU",
        "kind": 2,
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "peekOfCode": "def addONU(comm, command, data):\n    command(f\"interface gpon {data['frame']}/{data['slot']}\")\n    command(\n        f'ont add {data[\"port\"]} sn-auth {data[\"sn\"]} omci ont-lineprofile-name \"{data[\"lineProfile\"]}\" ont-srvprofile-name \"{data[\"srvProfile\"]}\"  desc \"{data[\"name\"]}\" '\n    )\n    value = decoder(comm)\n    fail = failChecker(value)\n    if fail == None:\n        (_, end) = check(value, \"ONTID :\").span()\n        ID = value[end : end + 3].replace(\" \", \"\").replace(\"\\n\", \"\")",
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addOnuService",
        "kind": 2,
        "importPath": "helpers.operations.addHandler",
        "description": "helpers.operations.addHandler",
        "peekOfCode": "def addOnuService(comm, command, data):\n    preg = inp(\n        \"Desea verificar si el cliente ya tiene la wan interface configurada? [Y | N] : \"\n    ).upper()\n    if preg == \"Y\":\n        preWan(comm, command, data)\n    data[\"wan\"][0][\"vlan\"] = inp(\"Ingrese la vlan de proveedor de cliente : \")\n    data[\"wan\"][0][\"plan\"] = inp(\"Ingrese plan de cliente : \")\n    addVlan = inp(\"Se agregara vlan al puerto? [Y | N] : \").upper()\n    if addVlan == \"Y\":",
        "detail": "helpers.operations.addHandler",
        "documentation": {}
    },
    {
        "label": "addONUNew",
        "kind": 2,
        "importPath": "helpers.operations.newAddHandler",
        "description": "helpers.operations.newAddHandler",
        "peekOfCode": "def addONUNew(comm, command, data):\n    command(f\"interface gpon {data['frame']}/{data['slot']}\")\n    command(\n        f'ont add {data[\"port\"]} sn-auth {data[\"sn\"]} omci ont-lineprofile-id {data[\"lineProfile\"]} ont-srvprofile-id {data[\"srvProfile\"]} desc \"{data[\"name\"]}\" '\n    )\n    value = decoder(comm)\n    fail = failChecker(value)\n    if fail == None:\n        (_, end) = check(value, \"ONTID :\").span()\n        ID = value[end : end + 3].replace(\" \", \"\").replace(\"\\n\", \"\").replace(\"\\r\", \"\")",
        "detail": "helpers.operations.newAddHandler",
        "documentation": {}
    },
    {
        "label": "addOnuServiceNew",
        "kind": 2,
        "importPath": "helpers.operations.newAddHandler",
        "description": "helpers.operations.newAddHandler",
        "peekOfCode": "def addOnuServiceNew(comm, command, data):\n    serviceType = inp(\n        \"\"\"\n    Ingrese el tipo de servicio a instalar :\n    > I : Internet\n    > V : VoIP\n    > P : Publicas\n    $ \"\"\"\n    )\n    data[\"wan\"][0][\"spid\"] = spidCalc(data)[serviceType]",
        "detail": "helpers.operations.newAddHandler",
        "documentation": {}
    },
    {
        "label": "ontSpid",
        "kind": 2,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "def ontSpid(comm, command, FRAME, SLOT, PORT, ID):\n    command(f\" display  service-port  port  {FRAME}/{SLOT}/{PORT}  ont  {ID}  |  no-more\")\n    value = decoder(comm)\n    fail = failChecker(value)\n    if fail == None:\n        limits = checkIter(value, condition)\n        (_, s) = limits[1]\n        (e, _) = limits[2]\n        data = dataToDict(spidHeader, value[s : e - 2])\n        return (data, None)",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "availableSpid",
        "kind": 2,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "def availableSpid(comm, command):\n    command(\"display service-port next-free-index\")\n    command(\"\")\n    value = decoder(comm)\n    (_, e) = check(value, conditionSPID).span()\n    spid = value[e : e + 5].replace(\" \", \"\").replace(\"\\n\", \"\")\n    return spid\ndef verifySPID(comm, command, data):\n    command(f\"display service-port {data['wan'][0]['spid']} | no-more\")\n    value = decoder(comm)",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "verifySPID",
        "kind": 2,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "def verifySPID(comm, command, data):\n    command(f\"display service-port {data['wan'][0]['spid']} | no-more\")\n    value = decoder(comm)\n    fail = failChecker(value)\n    if fail == None:\n        (_, sIdx) = check(value, spidCheck[\"index\"]).span()\n        (eIdx, sId) = check(value, spidCheck[\"id\"]).span()\n        (eId, sAtt) = check(value, spidCheck[\"attr\"]).span()\n        (eAtt, _) = check(value, spidCheck[\"endAttr\"]).span()\n        (_, sPlan) = check(value, spidCheck[\"plan\"]).span()",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "spidCalc",
        "kind": 2,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "def spidCalc(data):\n    return {\n        \"I\": 12288*(int(data[\"slot\"]) - 1) + 771 * int(data[\"port\"]) + 3 * int(data[\"id\"]),\n        \"V\": 12288*(int(data[\"slot\"]) - 1) + 771 * int(data[\"port\"]) + 3 * int(data[\"id\"]) + 1,\n        \"P\": 12288*(int(data[\"slot\"]) - 1) + 771 * int(data[\"port\"]) + 3 * int(data[\"id\"]) + 2\n    }",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "conditionSpidOnt",
        "kind": 5,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "conditionSpidOnt = \"CTRL_C to break\"\ncondition = \"-----------------------------------------------------------------------------\"\nspidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "condition = \"-----------------------------------------------------------------------------\"\nspidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "spidHeader",
        "kind": 5,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "spidHeader = \"SPID,ID,ATT,PORT_TYPE,F/S,/P,VPI,VCI,FLOW_TYPE,FLOW_PARA,RX,TX,STATE,\"\nconditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "conditionSPID",
        "kind": 5,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "conditionSPID = \"\"\"Next valid free service virtual port ID: \"\"\"\nspidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",\n    \"endStatus\": \"Label               :\",",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "spidCheck",
        "kind": 5,
        "importPath": "helpers.operations.spid",
        "description": "helpers.operations.spid",
        "peekOfCode": "spidCheck = {\n    \"index\": \"Index               : \",\n    \"id\": \"VLAN ID             : \",\n    \"attr\": \"VLAN attr           : \",\n    \"endAttr\": \"Port type\",\n    \"plan\": \"Outbound table name : \",\n    \"adminStatus\": \"Admin status        : \",\n    \"status\": \"State               : \",\n    \"endStatus\": \"Label               :\",\n}",
        "detail": "helpers.operations.spid",
        "documentation": {}
    },
    {
        "label": "decoder",
        "kind": 2,
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "peekOfCode": "def decoder(comm):\n    data = \"\"\n    chunk = comm.recv(1024000000)\n    chunk = chunk.decode(\"latin-1\")\n    data += chunk\n    ansi_escape = re.compile(r\"\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])\")\n    data = ansi_escape.sub(\"\", data)\n    return data\ndef check(value, condition):\n    regex = re.search(condition, value)",
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "peekOfCode": "def check(value, condition):\n    regex = re.search(condition, value)\n    return regex\ndef checkIter(value, condition):\n    result = []\n    res = re.finditer(condition, value)\n    for match in res:\n        result.append(match.span())\n    return result",
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "checkIter",
        "kind": 2,
        "importPath": "helpers.utils.decoder",
        "description": "helpers.utils.decoder",
        "peekOfCode": "def checkIter(value, condition):\n    result = []\n    res = re.finditer(condition, value)\n    for match in res:\n        result.append(match.span())\n    return result",
        "detail": "helpers.utils.decoder",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "helpers.utils.display",
        "description": "helpers.utils.display",
        "peekOfCode": "def display(data, tp):\n    \"\"\"\n    tp ==> type\n    tp == A => all data will be displayed\n    tp == I => data to installation concern will be displayed\n    tp == B => only data will be displayed without input to be required\n    \"\"\"\n    proceed = False\n    if tp == \"A\":\n        str1 = f\"\"\"",
        "detail": "helpers.utils.display",
        "documentation": {}
    },
    {
        "label": "intFormatter",
        "kind": 2,
        "importPath": "helpers.utils.interfaceHandler",
        "description": "helpers.utils.interfaceHandler",
        "peekOfCode": "def intFormatter(data, infc):\n  (_,s) = check(data, interface[\"start\"]).span()\n  (e,_) = check(data, interface[\"end\"]).span()\n  value = dataToDict(interface[\"header\"],data[s:e])\n  result = list(filter(lambda interface: interface['Interface'] == infc, value))[0]\n  return result",
        "detail": "helpers.utils.interfaceHandler",
        "documentation": {}
    },
    {
        "label": "colorFormatter",
        "kind": 2,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "def colorFormatter(txt, variant):\n    return color[variant] + txt + color[\"end\"]\ndef log(value):\n    currTime = datetime.now()\n    now = f\"[{currTime.hour}:{currTime.minute}:{currTime.second}]\"\n    print(value)\n    print(f\"{now}\\n{value}\", file=open(f\"{docs}/logs/{fl}\", \"a\",encoding=\"utf-8\"))\ndef inp(message):\n    currTime = datetime.now()\n    now = f\"[{currTime.hour}:{currTime.minute}:{currTime.second}]\"",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 2,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "def log(value):\n    currTime = datetime.now()\n    now = f\"[{currTime.hour}:{currTime.minute}:{currTime.second}]\"\n    print(value)\n    print(f\"{now}\\n{value}\", file=open(f\"{docs}/logs/{fl}\", \"a\",encoding=\"utf-8\"))\ndef inp(message):\n    currTime = datetime.now()\n    now = f\"[{currTime.hour}:{currTime.minute}:{currTime.second}]\"\n    data = input(message).upper()\n    print(f\"{now}\\n{message} {data}\", file=open(f\"{docs}/logs/{fl}\", \"a\",encoding=\"utf-8\"))",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "inp",
        "kind": 2,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "def inp(message):\n    currTime = datetime.now()\n    now = f\"[{currTime.hour}:{currTime.minute}:{currTime.second}]\"\n    data = input(message).upper()\n    print(f\"{now}\\n{message} {data}\", file=open(f\"{docs}/logs/{fl}\", \"a\",encoding=\"utf-8\"))\n    return data",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "docs",
        "kind": 5,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "docs = userpaths.get_my_documents()\ndate = datetime.now()\nfl = f\"{date.year}-{date.month}-{date.day}.txt\"\ncolor = {\n    \"activated\": \"\\u001b[38;5;2m\",\n    \"suspended\": \"\\u001b[38;5;8m\",\n    \"suspended+\": \"\\u001b[38;5;235m\",\n    \"success\": \"\\u001b[38;5;46m\",\n    \"warning\": \"\\u001b[38;5;202m\",\n    \"off\": \"\\u001b[38;5;9m\",",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "date = datetime.now()\nfl = f\"{date.year}-{date.month}-{date.day}.txt\"\ncolor = {\n    \"activated\": \"\\u001b[38;5;2m\",\n    \"suspended\": \"\\u001b[38;5;8m\",\n    \"suspended+\": \"\\u001b[38;5;235m\",\n    \"success\": \"\\u001b[38;5;46m\",\n    \"warning\": \"\\u001b[38;5;202m\",\n    \"off\": \"\\u001b[38;5;9m\",\n    \"los1\": \"\\u001b[38;5;196m\",",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "fl",
        "kind": 5,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "fl = f\"{date.year}-{date.month}-{date.day}.txt\"\ncolor = {\n    \"activated\": \"\\u001b[38;5;2m\",\n    \"suspended\": \"\\u001b[38;5;8m\",\n    \"suspended+\": \"\\u001b[38;5;235m\",\n    \"success\": \"\\u001b[38;5;46m\",\n    \"warning\": \"\\u001b[38;5;202m\",\n    \"off\": \"\\u001b[38;5;9m\",\n    \"los1\": \"\\u001b[38;5;196m\",\n    \"los1\": \"\\u001b[38;5;196m\",",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": "helpers.utils.printer",
        "description": "helpers.utils.printer",
        "peekOfCode": "color = {\n    \"activated\": \"\\u001b[38;5;2m\",\n    \"suspended\": \"\\u001b[38;5;8m\",\n    \"suspended+\": \"\\u001b[38;5;235m\",\n    \"success\": \"\\u001b[38;5;46m\",\n    \"warning\": \"\\u001b[38;5;202m\",\n    \"off\": \"\\u001b[38;5;9m\",\n    \"los1\": \"\\u001b[38;5;196m\",\n    \"los1\": \"\\u001b[38;5;196m\",\n    \"los2\": \"\\u001b[38;5;88m\",",
        "detail": "helpers.utils.printer",
        "documentation": {}
    },
    {
        "label": "modifier",
        "kind": 2,
        "importPath": "helpers.utils.sheets",
        "description": "helpers.utils.sheets",
        "peekOfCode": "def modifier(column, searchedValue, value):\n    sa = gspread.service_account(\n        filename=\"service_account_olt_operations.json\")\n    sh = sa.open(\"CPDC\")\n    wks = sh.worksheet(\"DATOS\")\n    cell = wks.find(searchedValue)\n    wks.update_cell(cell.row, cellMap[column], value)",
        "detail": "helpers.utils.sheets",
        "documentation": {}
    },
    {
        "label": "cellMap",
        "kind": 5,
        "importPath": "helpers.utils.sheets",
        "description": "helpers.utils.sheets",
        "peekOfCode": "cellMap = {\n    'SN': 1,\n    'NAME': 2,\n    'CI': 3,\n    'OLT': 4,\n    'FRAME': 5,\n    'SLOT': 6,\n    'PORT': 7,\n    'ID': 8,\n    'ONT': 9,",
        "detail": "helpers.utils.sheets",
        "documentation": {}
    },
    {
        "label": "ssh",
        "kind": 2,
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "peekOfCode": "def ssh(ip):\n    delay = 1.5\n    conn = paramiko.SSHClient()\n    conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    conn.connect(ip, port, username, password)\n    comm = conn.invoke_shell()\n    def enter():\n        comm.send(\" \\n\")\n        comm.send(\" \\n\")\n        sleep(delay)",
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "peekOfCode": "username = os.environ[\"user\"]\npassword = os.environ[\"password\"]\nport = os.environ[\"port\"]\ndef ssh(ip):\n    delay = 1.5\n    conn = paramiko.SSHClient()\n    conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    conn.connect(ip, port, username, password)\n    comm = conn.invoke_shell()\n    def enter():",
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "peekOfCode": "password = os.environ[\"password\"]\nport = os.environ[\"port\"]\ndef ssh(ip):\n    delay = 1.5\n    conn = paramiko.SSHClient()\n    conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    conn.connect(ip, port, username, password)\n    comm = conn.invoke_shell()\n    def enter():\n        comm.send(\" \\n\")",
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "helpers.utils.ssh",
        "description": "helpers.utils.ssh",
        "peekOfCode": "port = os.environ[\"port\"]\ndef ssh(ip):\n    delay = 1.5\n    conn = paramiko.SSHClient()\n    conn.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    conn.connect(ip, port, username, password)\n    comm = conn.invoke_shell()\n    def enter():\n        comm.send(\" \\n\")\n        comm.send(\" \\n\")",
        "detail": "helpers.utils.ssh",
        "documentation": {}
    },
    {
        "label": "approved",
        "kind": 2,
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "peekOfCode": "def approved(data):\n    template = f\"\"\"\n    |{data['name']}  |  {data['frame']}/{data['slot']}/{data['port']}/{data['id']} \n    |OLT  {data['olt']}  {data[\"wan\"][0][\"vlan\"]}  {data[\"wan\"][0][\"plan\"]}\n    |TEMPERATURA :   {data['temp']}\n    |POTENCIA    :   {data['pwr']}\n    |SPID        :   {data[\"wan\"][0][\"spid\"]}\"\"\"\n    log(colorFormatter(template, \"success\"))\n    return [\n        data[\"sn\"],",
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "denied",
        "kind": 2,
        "importPath": "helpers.utils.template",
        "description": "helpers.utils.template",
        "peekOfCode": "def denied(data, reason):\n    template = f\"\"\"\n    |{data['name']}  |  {data['frame']}/{data['slot']}/{data['port']}/{data['id']} \n    |OLT  {data['olt']}  {data[\"wan\"][0][\"vlan\"]}  {data[\"wan\"][0][\"plan\"]}\n    |TEMPERATURA :   {data['temp']}\n    |POTENCIA    :   {data['pwr']}\n    |SPID        :   {data[\"wan\"][0]['spid']}\n    |RAZÓN       :   {reason}\"\"\"\n    log(colorFormatter(template, \"warning\"))",
        "detail": "helpers.utils.template",
        "documentation": {}
    },
    {
        "label": "existingLookup",
        "kind": 2,
        "importPath": "scripts.BC",
        "description": "scripts.BC",
        "peekOfCode": "def existingLookup(comm, command, quit, olt):\n    lookupType = inp(\n        \"Buscar cliente por serial, por nombre o por Datos (F/S/P/ID) [S | N | D] : \"\n    )\n    data = (\n        dataLookup(comm, command, olt, lookupType)\n        if lookupType != \"N\"\n        else nameLookup(comm, command, quit)\n    )\n    if data[\"fail\"] != None:",
        "detail": "scripts.BC",
        "documentation": {}
    },
    {
        "label": "deleteClient",
        "kind": 2,
        "importPath": "scripts.EC",
        "description": "scripts.EC",
        "peekOfCode": "def deleteClient(comm, command, quit, olt):\n    lookupType = inp(\"Buscar cliente por serial o por Datos (F/S/P/ID) [S | D] : \")\n    data = dataLookup(comm,command,olt,lookupType)\n    if data[\"fail\"] != None:\n        log(colorFormatter(data[\"fail\"], \"fail\"))\n        quit()\n        return\n    proceed = display(data,\"A\")\n    if not proceed:\n        log(colorFormatter(\"Cancelando...\", \"warning\"))",
        "detail": "scripts.EC",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": "scripts.IX",
        "description": "scripts.IX",
        "peekOfCode": "def confirm(comm, command, quit, olt, action):\n    sa = gspread.service_account(filename=\"service_account_olt_operations.json\")\n    sh = sa.open(\"CPDC\")\n    wks = sh.worksheet(\"DATOS\")\n    lstRow = len(wks.get_all_records()) + 2\n    data = {\n        \"fail\": None,\n        \"name\": None,\n        \"olt\": olt,\n        \"frame\": None,",
        "detail": "scripts.IX",
        "documentation": {}
    },
    {
        "label": "confirmNew",
        "kind": 2,
        "importPath": "scripts.IXN",
        "description": "scripts.IXN",
        "peekOfCode": "def confirmNew(comm, command, quit, olt, action):\n    sa = gspread.service_account(filename=\"service_account_olt_operations.json\")\n    sh = sa.open(\"CPDC\")\n    wks = sh.worksheet(\"DATOS\")\n    lstRow = len(wks.get_all_records()) + 2\n    proceed = None\n    data = {\n        \"fail\": None,\n        \"name\": None,\n        \"olt\": olt,",
        "detail": "scripts.IXN",
        "documentation": {}
    },
    {
        "label": "modifyClient",
        "kind": 2,
        "importPath": "scripts.MC",
        "description": "scripts.MC",
        "peekOfCode": "def modifyClient(comm, command, quit, olt):\n    proceed = None\n    action = inp(\n        \"\"\"\nQue cambio se realizara? \n  > (CT)    :   Cambiar Titular\n  > (CO)    :   Cambiar ONT\n  > (CP)    :   Cambiar Plan & Vlan\n  > (ES)    :   Eliminar Service Port\n  > (AS)    :   Agregar Service Port",
        "detail": "scripts.MC",
        "documentation": {}
    },
    {
        "label": "olt",
        "kind": 2,
        "importPath": "scripts.OLT",
        "description": "scripts.OLT",
        "peekOfCode": "def olt():\n    oltOptions = [\"1\", \"2\", \"3\"]\n    olt = inp(\"Seleccione la OLT [1 | 2 | 3] : \").upper()\n    if olt in oltOptions:\n        ip = \"181.232.180.7\" if olt == \"1\" else \"181.232.180.5\" if olt == \"2\" else \"181.232.180.6\"\n        (comm, command, quit) = ssh(ip)\n        decoder(comm)\n        action = inp(\n            \"\"\"\nQue accion se realizara? ",
        "detail": "scripts.OLT",
        "documentation": {}
    },
    {
        "label": "operate",
        "kind": 2,
        "importPath": "scripts.OX",
        "description": "scripts.OX",
        "peekOfCode": "def operate(comm,command,quit,olt,action):\n  operation = \"activate\" if \"R\" in action else (\"deactivate\" if \"S\" in action else \"\")\n  resultedAction = \"Reactivado\" if \"R\" in action else (\"Suspendido\" if \"S\" in action else \"\")\n  state = \"active\" if \"R\" in action else (\"deactive\" if \"S\" in action else \"\")\n  actionList = []\n  proceed = False\n  if \"L\" in action:\n    fileType = inp(\"Es un archivo CSV o EXCEL? [C : E]: \")\n    log(\"Selecciona la lista de clientes\")\n    fileName = filedialog.askopenfilename()",
        "detail": "scripts.OX",
        "documentation": {}
    },
    {
        "label": "rtr",
        "kind": 2,
        "importPath": "scripts.RTR",
        "description": "scripts.RTR",
        "peekOfCode": "def rtr():\n    ip = \"\"\n    interfaces = []\n    rt = inp(\n        \"Selecciona el router de borde a monitorear [INTER | VNET] : \").upper()\n    if rt == \"INTER\" or rt == \"VNET\":\n        ip = \"181.232.180.1\" if rt == \"INTER\" else \"181.232.180.2\"\n        intList = router[\"interfacesC1\"] if rt == \"INTER\" else router[\"interfacesC2\"]\n        (comm, command, quit) = ssh(ip)\n        decoder(comm)",
        "detail": "scripts.RTR",
        "documentation": {}
    },
    {
        "label": "verifyTraffic",
        "kind": 2,
        "importPath": "scripts.VC",
        "description": "scripts.VC",
        "peekOfCode": "def verifyTraffic(comm,command,quit,olt):\n    speedUpArr = []\n    speedDownArr = []\n    lookupType = inp(\"Buscar cliente por serial o por Datos (F/S/P/ID) [S | D] : \")\n    data = dataLookup(comm, command, olt, lookupType)\n    if data[\"fail\"] != None:\n        log(colorFormatter(data[\"fail\"], \"fail\"))\n        quit()\n        return\n    proceed = display(data,\"A\")",
        "detail": "scripts.VC",
        "documentation": {}
    },
    {
        "label": "portOperation",
        "kind": 2,
        "importPath": "scripts.XP",
        "description": "scripts.XP",
        "peekOfCode": "def portOperation(comm, command, quit, olt, action):\n    keep = True\n    lst = []\n    portCount = []\n    if action == \"VP\":\n        FRAME = inp(\"Ingrese frame de cliente  : \")\n        SLOT = inp(\"Ingrese slot de cliente   : \")\n        PORT = inp(\"Ingrese puerto de cliente : \")\n        lst = [{\"fsp\": f\"{FRAME}/{SLOT}/{PORT}\"}]\n    if action == \"CA\":",
        "detail": "scripts.XP",
        "documentation": {}
    },
    {
        "label": "wksTesting",
        "kind": 2,
        "importPath": "TS",
        "description": "TS",
        "peekOfCode": "def wksTesting():\n    gc = pygsheets.authorize(service_account_file=path)\n    sh = gc.open(\"CPDC\")\n    wks = sh[3]\n    cell = wks.find(\"4857544393CC9DA4\")\n    print(cell.row)\n# 48575443F1839DA6 => modem router\n# 485754430B0ACBA9 => bridge",
        "detail": "TS",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "TS",
        "description": "TS",
        "peekOfCode": "path = \"./service_account_olt_operations.json\"\ndef wksTesting():\n    gc = pygsheets.authorize(service_account_file=path)\n    sh = gc.open(\"CPDC\")\n    wks = sh[3]\n    cell = wks.find(\"4857544393CC9DA4\")\n    print(cell.row)\n# 48575443F1839DA6 => modem router\n# 485754430B0ACBA9 => bridge",
        "detail": "TS",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    try:\n        while True:\n            device = inp(\n                \"Seleccione el equipo a utilizar [ROUTER | OLT] : \").upper()\n            if device == \"OLT\":\n                olt()\n            elif device == \"ROUTER\":\n                rtr()\n            else:",
        "detail": "main",
        "documentation": {}
    }
]